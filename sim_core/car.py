from sim_core.utils import ms_to_kph

class Car:
    def __init__(self, mass, radius_wheel, engine, front_wing, tire):
        '''The function initializes the attributes of an object and calls the reset method.
        
        Parameters
        ----------
        mass
            The mass parameter represents the mass of the object or vehicle. It is a measure of the amount of
        matter in the object and is measured in kilograms (kg).
        radius_wheel
            The radius of the wheel of the object. It is used to calculate the distance traveled by the object
        when the wheel rotates.
        engine
            The engine parameter refer to the engine used by the car.
        '''
        self.mass = mass
        self.radius_wheel = radius_wheel
        self.front_wing = front_wing
        self.engine = engine
        self.tire = tire
        self.reset()

    def reset(self):
        '''The `reset` function sets the speed to 0 and calls the `reset` method of the `engine` object.
        
        '''
        self.speed = 0
        self.__throttle = 0
        self.engine.reset()

    def accelerate(self, delta_t):
        '''The function calculates the acceleration of a vehicle and updates its speed based on the force
        generated by the engine.
        
        Parameters
        ----------
        delta_t
            The parameter `delta_t` represents the change in time. It is used to calculate the change in
        speed over a given time interval.
        
        '''
        force_engine = self.engine.force_wheel(self.radius_wheel, self.__throttle)
        drag = self.front_wing.get_drag(ms_to_kph(self.speed))
        net_force = force_engine - drag
        grip_limitation = self.tire.get_grip() * self.mass # todo acount for downforce
        print("Grip : ", self.tire.get_grip(), " Grip limitation: ", grip_limitation)
        print("net force: ", net_force)
        if grip_limitation < net_force:
            print("Grip limitation reached")
        net_force = min(net_force, grip_limitation)
        acceleration = net_force / self.mass
        self.speed += acceleration * delta_t
        self.engine.update_rpm(self.radius_wheel, self.speed)
    
    def force_wheel(self):
        return self.engine.force_wheel(self.radius_wheel, self.__throttle)
    
    def set_throttle(self, ratio):
        self.__throttle = ratio
    
    def get_weight(self):
        return self.mass * 9.81